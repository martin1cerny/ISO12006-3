// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.ISO_12006_3_V4.Interfaces;
using Xbim.ISO_12006_3_V4;
//## Custom using statements
//##

namespace Xbim.ISO_12006_3_V4.Interfaces
{
	/// <summary>
    /// Readonly interface for xtdMeasureTolerance
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IxtdMeasureTolerance : IxtdConstraint
	{
		IxtdValueType @Tolerance { get;  set; }
		bool @OpenInterval { get;  set; }
		xtdConstraintValueTypeEnum? @ValueType { get;  set; }
	
	}
}

namespace Xbim.ISO_12006_3_V4
{
	[ExpressType("xtdMeasureTolerance", 2)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @xtdMeasureTolerance : xtdConstraint, IInstantiableEntity, IxtdMeasureTolerance, IContainsEntityReferences, IContainsIndexedReferences, IEquatable<@xtdMeasureTolerance>
	{
		#region IxtdMeasureTolerance explicit implementation
		IxtdValueType IxtdMeasureTolerance.Tolerance { 
 
 
			get { return @Tolerance; } 
			set { Tolerance = value as xtdValueType;}
		}	
		bool IxtdMeasureTolerance.OpenInterval { 
 
			get { return @OpenInterval; } 
			set { OpenInterval = value;}
		}	
		xtdConstraintValueTypeEnum? IxtdMeasureTolerance.ValueType { 
 
			get { return @ValueType; } 
			set { ValueType = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal xtdMeasureTolerance(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private xtdValueType _tolerance;
		private bool _openInterval;
		private xtdConstraintValueTypeEnum? _valueType;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(6, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, null, null, 6)]
		public xtdValueType @Tolerance 
		{ 
			get 
			{
				if(_activated) return _tolerance;
				Activate();
				return _tolerance;
			} 
			set
			{
				SetValue( v =>  _tolerance = v, _tolerance, value,  "Tolerance", 6);
			} 
		}	
		[EntityAttribute(7, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 7)]
		public bool @OpenInterval 
		{ 
			get 
			{
				if(_activated) return _openInterval;
				Activate();
				return _openInterval;
			} 
			set
			{
				SetValue( v =>  _openInterval = v, _openInterval, value,  "OpenInterval", 7);
			} 
		}	
		[EntityAttribute(8, EntityAttributeState.Optional, EntityAttributeType.Enum, EntityAttributeType.None, null, null, 8)]
		public xtdConstraintValueTypeEnum? @ValueType 
		{ 
			get 
			{
				if(_activated) return _valueType;
				Activate();
				return _valueType;
			} 
			set
			{
				SetValue( v =>  _valueType = v, _valueType, value,  "ValueType", 8);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
					base.Parse(propIndex, value, nestedIndex); 
					return;
				case 5: 
					_tolerance = (xtdValueType)(value.EntityVal);
					return;
				case 6: 
					_openInterval = value.BooleanVal;
					return;
				case 7: 
                    _valueType = (xtdConstraintValueTypeEnum) System.Enum.Parse(typeof (xtdConstraintValueTypeEnum), value.EnumVal, true);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@xtdMeasureTolerance other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				foreach(var entity in @Descriptions)
					yield return entity;
				foreach(var entity in @Names)
					yield return entity;
			}
		}
		#endregion


		#region IContainsIndexedReferences
        IEnumerable<IPersistEntity> IContainsIndexedReferences.IndexedReferences 
		{ 
			get
			{
				foreach(var entity in @Descriptions)
					yield return entity;
				foreach(var entity in @Names)
					yield return entity;
				
			} 
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}