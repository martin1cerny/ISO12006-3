// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.ISO_12006_3_V4.Interfaces;
using Xbim.ISO_12006_3_V4;
//## Custom using statements
//##

namespace Xbim.ISO_12006_3_V4.Interfaces
{
	/// <summary>
    /// Readonly interface for xtdDerivedUnit
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IxtdDerivedUnit : IPersistEntity, xtdUnitDefinition
	{
		IItemSet<IxtdDerivedUnitElement> @Elements { get; }
		xtdDimensionalExponents @Dimensions  { get ; }
	
	}
}

namespace Xbim.ISO_12006_3_V4
{
	[ExpressType("xtdDerivedUnit", 8)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @xtdDerivedUnit : PersistEntity, IInstantiableEntity, IxtdDerivedUnit, IContainsEntityReferences, IEquatable<@xtdDerivedUnit>
	{
		#region IxtdDerivedUnit explicit implementation
		IItemSet<IxtdDerivedUnitElement> IxtdDerivedUnit.Elements { 
			get { return new Common.Collections.ProxyItemSet<xtdDerivedUnitElement, IxtdDerivedUnitElement>( @Elements); } 
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal xtdDerivedUnit(IModel model, int label, bool activated) : base(model, label, activated)  
		{
			_elements = new ItemSet<xtdDerivedUnitElement>( this, 0,  1);
		}

		#region Explicit attribute fields
		private readonly ItemSet<xtdDerivedUnitElement> _elements;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.Set, EntityAttributeType.Class, new int [] { 1 }, new int [] { -1 }, 1)]
		public IItemSet<xtdDerivedUnitElement> @Elements 
		{ 
			get 
			{
				if(_activated) return _elements;
				Activate();
				return _elements;
			} 
		}	
		#endregion


		#region Derived attributes
		[EntityAttribute(0, EntityAttributeState.Derived, EntityAttributeType.Class, EntityAttributeType.None, null, null, 0)]
		public xtdDimensionalExponents @Dimensions 
		{
			get 
			{
				//## Getter for Dimensions
                var elements = this.Elements;
                var result = new List<double> { 0, 0, 0, 0, 0, 0, 0};
                if (!elements.Any())
                    return new xtdDimensionalExponents(null, -1, true);

                foreach (var unitElement in elements)
                {
                    result[0] = result[0] +
                          (unitElement.Exponent * unitElement.Unit.Dimensions.LengthExponent);
                    result[1] = result[1] +
                          (unitElement.Exponent * unitElement.Unit.Dimensions.MassExponent);
                    result[2] = result[2] +
                          (unitElement.Exponent * unitElement.Unit.Dimensions.TimeExponent);
                    result[3] = result[3] +
                          (unitElement.Exponent * unitElement.Unit.Dimensions.ElectricCurrentExponent);
                    result[4] = result[4] +
                          (unitElement.Exponent * unitElement.Unit.Dimensions.ThermodynamicTemperatureExponent);
                    result[5] = result[5] +
                          (unitElement.Exponent * unitElement.Unit.Dimensions.AmountOfSubstanceExponent);
                    result[6] = result[6] +
                          (unitElement.Exponent * unitElement.Unit.Dimensions.LuminousIntensityExponent);
                }
                return new xtdDimensionalExponents(
                    result[0],
                    result[1],
                    result[2],
                    result[3],
                    result[4],
                    result[5],
                    result[6]
                    );
                //##
			}
		}

		#endregion


		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_elements.InternalAdd((xtdDerivedUnitElement)value.EntityVal);
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@xtdDerivedUnit other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				foreach(var entity in @Elements)
					yield return entity;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}