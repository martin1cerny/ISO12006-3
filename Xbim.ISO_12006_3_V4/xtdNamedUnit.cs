// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.ISO_12006_3_V4.Interfaces;
using Xbim.ISO_12006_3_V4;
//## Custom using statements
//##

namespace Xbim.ISO_12006_3_V4.Interfaces
{
	/// <summary>
    /// Readonly interface for xtdNamedUnit
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IxtdNamedUnit : IPersistEntity, xtdUnitDefinition
	{
		xtdDimensionalExponents @Dimensions  { get ; }
	
	}
}

namespace Xbim.ISO_12006_3_V4
{
	[ExpressType("xtdNamedUnit", 11)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @xtdNamedUnit : PersistEntity, IxtdNamedUnit, IEquatable<@xtdNamedUnit>
	{
		#region IxtdNamedUnit explicit implementation
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal xtdNamedUnit(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}



		#region Derived attributes
		[EntityAttribute(0, EntityAttributeState.Derived, EntityAttributeType.Class, EntityAttributeType.None, null, null, 0)]
		public xtdDimensionalExponents @Dimensions 
		{
			get 
			{
				//## Getter for Dimensions
                if (this is xtdSIUnit si)
                {
                    return si.xtdDimensionsForSiUnit(si.Name);
                }
                if (this is xtdConversionBasedUnit conv)
                {
                    if (conv.BaseUnit is xtdNamedUnit nu)
                        return nu.Dimensions;
                    if (conv.BaseUnit is xtdDerivedUnit du)
                        return du.Dimensions;
                    throw new ArgumentOutOfRangeException("typeof(xtdConversionBasedUnit.BaseUnit)");
                }
                if (this is xtdContextDependentUnit cont)
                {
                    return new xtdDimensionalExponents(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                }
                throw new ArgumentOutOfRangeException("typeof(xtdNamedUnit)");
                //##
			}
		}

		#endregion


		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			//there are no attributes defined for this entity
            throw new System.IndexOutOfRangeException("There are no attributes defined for this entity");
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@xtdNamedUnit other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}