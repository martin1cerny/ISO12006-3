// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.ISO_12006_3_V4.Interfaces;
using Xbim.ISO_12006_3_V4;
//## Custom using statements
//##

namespace Xbim.ISO_12006_3_V4.Interfaces
{
	/// <summary>
    /// Readonly interface for xtdExternalSchema
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IxtdExternalSchema : IPersistEntity
	{
		xtdLabel? @Name { get;  set; }
		xtdText? @Description { get;  set; }
		xtdLabel @Identifier { get;  set; }
		xtdLabel @Version { get;  set; }
		xtdLabel? @Location { get;  set; }
	
	}
}

namespace Xbim.ISO_12006_3_V4
{
	[ExpressType("xtdExternalSchema", 69)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @xtdExternalSchema : PersistEntity, IInstantiableEntity, IxtdExternalSchema, IEquatable<@xtdExternalSchema>
	{
		#region IxtdExternalSchema explicit implementation
		xtdLabel? IxtdExternalSchema.Name { 
 
			get { return @Name; } 
			set { Name = value;}
		}	
		xtdText? IxtdExternalSchema.Description { 
 
			get { return @Description; } 
			set { Description = value;}
		}	
		xtdLabel IxtdExternalSchema.Identifier { 
 
			get { return @Identifier; } 
			set { Identifier = value;}
		}	
		xtdLabel IxtdExternalSchema.Version { 
 
			get { return @Version; } 
			set { Version = value;}
		}	
		xtdLabel? IxtdExternalSchema.Location { 
 
			get { return @Location; } 
			set { Location = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal xtdExternalSchema(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private xtdLabel? _name;
		private xtdText? _description;
		private xtdLabel _identifier;
		private xtdLabel _version;
		private xtdLabel? _location;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 1)]
		public xtdLabel? @Name 
		{ 
			get 
			{
				if(_activated) return _name;
				Activate();
				return _name;
			} 
			set
			{
				SetValue( v =>  _name = v, _name, value,  "Name", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 2)]
		public xtdText? @Description 
		{ 
			get 
			{
				if(_activated) return _description;
				Activate();
				return _description;
			} 
			set
			{
				SetValue( v =>  _description = v, _description, value,  "Description", 2);
			} 
		}	
		[EntityAttribute(3, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 3)]
		public xtdLabel @Identifier 
		{ 
			get 
			{
				if(_activated) return _identifier;
				Activate();
				return _identifier;
			} 
			set
			{
				SetValue( v =>  _identifier = v, _identifier, value,  "Identifier", 3);
			} 
		}	
		[EntityAttribute(4, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 4)]
		public xtdLabel @Version 
		{ 
			get 
			{
				if(_activated) return _version;
				Activate();
				return _version;
			} 
			set
			{
				SetValue( v =>  _version = v, _version, value,  "Version", 4);
			} 
		}	
		[EntityAttribute(5, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 5)]
		public xtdLabel? @Location 
		{ 
			get 
			{
				if(_activated) return _location;
				Activate();
				return _location;
			} 
			set
			{
				SetValue( v =>  _location = v, _location, value,  "Location", 5);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_name = value.StringVal;
					return;
				case 1: 
					_description = value.StringVal;
					return;
				case 2: 
					_identifier = value.StringVal;
					return;
				case 3: 
					_version = value.StringVal;
					return;
				case 4: 
					_location = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@xtdExternalSchema other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}