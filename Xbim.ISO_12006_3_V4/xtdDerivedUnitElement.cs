// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.ISO_12006_3_V4.Interfaces;
using Xbim.ISO_12006_3_V4;
//## Custom using statements
//##

namespace Xbim.ISO_12006_3_V4.Interfaces
{
	/// <summary>
    /// Readonly interface for xtdDerivedUnitElement
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IxtdDerivedUnitElement : IPersistEntity
	{
		IxtdNamedUnit @Unit { get;  set; }
		long @Exponent { get;  set; }
	
	}
}

namespace Xbim.ISO_12006_3_V4
{
	[ExpressType("xtdDerivedUnitElement", 16)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @xtdDerivedUnitElement : PersistEntity, IInstantiableEntity, IxtdDerivedUnitElement, IContainsEntityReferences, IEquatable<@xtdDerivedUnitElement>
	{
		#region IxtdDerivedUnitElement explicit implementation
		IxtdNamedUnit IxtdDerivedUnitElement.Unit { 
 
 
			get { return @Unit; } 
			set { Unit = value as xtdNamedUnit;}
		}	
		long IxtdDerivedUnitElement.Exponent { 
 
			get { return @Exponent; } 
			set { Exponent = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal xtdDerivedUnitElement(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private xtdNamedUnit _unit;
		private long _exponent;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, null, null, 1)]
		public xtdNamedUnit @Unit 
		{ 
			get 
			{
				if(_activated) return _unit;
				Activate();
				return _unit;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _unit = v, _unit, value,  "Unit", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 2)]
		public long @Exponent 
		{ 
			get 
			{
				if(_activated) return _exponent;
				Activate();
				return _exponent;
			} 
			set
			{
				SetValue( v =>  _exponent = v, _exponent, value,  "Exponent", 2);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_unit = (xtdNamedUnit)(value.EntityVal);
					return;
				case 1: 
					_exponent = value.IntegerVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@xtdDerivedUnitElement other)
	    {
	        return this == other;
	    }
        #endregion

		#region IContainsEntityReferences
		IEnumerable<IPersistEntity> IContainsEntityReferences.References 
		{
			get 
			{
				if (@Unit != null)
					yield return @Unit;
			}
		}
		#endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}