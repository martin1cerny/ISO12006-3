// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Xbim.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Xbim.Common.Metadata;
using Xbim.Common;
using Xbim.Common.Exceptions;
using Xbim.ISO_12006_3_V3.Interfaces;
using Xbim.ISO_12006_3_V3;
//## Custom using statements
//##

namespace Xbim.ISO_12006_3_V3.Interfaces
{
	/// <summary>
    /// Readonly interface for xtdLanguageRepresentation
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IxtdLanguageRepresentation : IPersistEntity
	{
		IxtdLanguage @LanguageName { get;  set; }
		xtdGlobalUniqueID @UniqueID { get;  set; }
	
	}
}

namespace Xbim.ISO_12006_3_V3
{
	[ExpressType("xtdLanguageRepresentation", 15)]
	// ReSharper disable once PartialTypeWithSinglePart
	public abstract partial class @xtdLanguageRepresentation : PersistEntity, IxtdLanguageRepresentation, IEquatable<@xtdLanguageRepresentation>
	{
		#region IxtdLanguageRepresentation explicit implementation
		IxtdLanguage IxtdLanguageRepresentation.LanguageName { 
 
 
			get { return @LanguageName; } 
			set { LanguageName = value as xtdLanguage;}
		}	
		xtdGlobalUniqueID IxtdLanguageRepresentation.UniqueID { 
 
			get { return @UniqueID; } 
			set { UniqueID = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal xtdLanguageRepresentation(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private xtdLanguage _languageName;
		private xtdGlobalUniqueID _uniqueID;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Mandatory, EntityAttributeType.Class, EntityAttributeType.None, null, null, 1)]
		public xtdLanguage @LanguageName 
		{ 
			get 
			{
				if(_activated) return _languageName;
				Activate();
				return _languageName;
			} 
			set
			{
				if (value != null && !(ReferenceEquals(Model, value.Model)))
					throw new XbimException("Cross model entity assignment.");
				SetValue( v =>  _languageName = v, _languageName, value,  "LanguageName", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Mandatory, EntityAttributeType.None, EntityAttributeType.None, null, null, 2)]
		public xtdGlobalUniqueID @UniqueID 
		{ 
			get 
			{
				if(_activated) return _uniqueID;
				Activate();
				return _uniqueID;
			} 
			set
			{
				SetValue( v =>  _uniqueID = v, _uniqueID, value,  "UniqueID", 2);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_languageName = (xtdLanguage)(value.EntityVal);
					return;
				case 1: 
					_uniqueID = value.StringVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@xtdLanguageRepresentation other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}